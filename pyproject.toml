[build-system]
    build-backend = "setuptools.build_meta"
    requires      = ["setuptools"]

[project]
    authors = [
        { name = "Diederik van der Boor", email = "opensource@edoburu.nl" },
        { name = "Timo Brembeck", email = "opensource@timo.brembeck.email" },
    ]
    classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Web Environment",
        "Framework :: Django :: 3.2",
        "Framework :: Django :: 4.2",
        "Framework :: Django :: 5.0",
        "Framework :: Django",
        "Framework :: Sphinx :: Extension",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python",
        "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
        "Topic :: Internet :: WWW/HTTP",
        "Topic :: Software Development :: Libraries :: Application Frameworks",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ]
    dependencies = ["Django>=3.2", "Sphinx>=3.4.0", "pprintpp"]
    description = "Improve the Sphinx autodoc for Django classes."
    dynamic = ["version"]
    keywords = ["django", "docstrings", "extension", "sphinx"]
    license = { text = "Apache2 2.0 License" }
    maintainers = [
        { name = "Timo Brembeck", email = "opensource@timo.brembeck.email" },
    ]
    name = "sphinxcontrib-django"
    readme = "README.rst"
    requires-python = ">=3.8"

    [project.urls]
        "Bug Tracker"   = "https://github.com/sphinx-doc/sphinxcontrib-django/issues"
        "Documentation" = "https://sphinxcontrib-django.readthedocs.io/"
        "Release Notes" = "https://github.com/sphinx-doc/sphinxcontrib-django/blob/main/CHANGES.rst"
        "Source Code"   = "https://github.com/sphinx-doc/sphinxcontrib-django"

    [project.optional-dependencies]
        dev = ["pre-commit"]
        doc = ["sphinx-last-updated-by-git", "sphinx-rtd-theme"]
        optional = [
            "django-mptt",
            "django-phonenumber-field[phonenumbers]",
            "psycopg2-binary",
        ]
        test = ["coverage", "pytest", "pytest-icdiff", "requests-mock"]

[tool.setuptools.dynamic]
    version = { attr = "sphinxcontrib_django.__version__" }

[tool.setuptools.packages.find]
    include = ["sphinxcontrib_django*"]

[tool.black]
    skip-magic-trailing-comma = true
    preview = true

[tool.coverage.run]
    command_line = "-m pytest"
    source       = ["sphinxcontrib_django"]

[tool.coverage.report]
    exclude_lines = [
        "pragma: no cover",
        "if TYPE_CHECKING:",
    ]

[tool.pytest.ini_options]
    addopts    = "-ra -vv --color=yes"
    minversion = "6.0"
    testpaths  = ["tests"]

[tool.ruff]
line-length = 99  # default is 88
target-version = "py38"

[tool.ruff.lint]
select = [
  "A",      # flake8-builtins
  "AIR",    # Airflow
  "ARG",    # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "DJ",     # flake8-django
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle
  "EM",     # flake8-errmsg
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FA",     # flake8-future-annotations
  "FIX",    # flake8-fixme
  "FLY",    # flynt
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INT",    # flake8-gettext
  "ISC",    # flake8-implicit-str-concat
  "LOG",    # flake8-logging
  "N",      # pep8-naming
  "NPY",    # NumPy-specific rules
  "PD",     # pandas-vet
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # Pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "PYI",    # flake8-pyi
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "TCH",    # flake8-type-checking
  "TD",     # flake8-todos
  "TID",    # flake8-tidy-imports
  "TRIO",   # flake8-trio
  "TRY",    # tryceratops
  "UP",     # pyupgrade
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  # "ANN",  # flake8-annotations
  # "COM",  # flake8-commas
  # "CPY",  # flake8-copyright
  # "D",    # pydocstyle
  # "ERA",  # eradicate
  # "FBT",  # flake8-boolean-trap
  # "FURB", # refurb
  # "INP",  # flake8-no-pep420
  # "Q",    # flake8-quotes
  # "SLF",  # flake8-self
  # "T20",  # flake8-print
]

[tool.ruff.lint.mccabe]
max-complexity = 13  # default is 10

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = ["A001"]
"sphinxcontrib_django/docstrings/__init__.py" = ["ARG001", "EM101", "RUF002", "TID252", "TRY003"]
"sphinxcontrib_django/docstrings/patches.py" = ["ARG005", "N806"]
"sphinxcontrib_django/roles.py" = ["ARG001", "N806", "PERF203"]
"tests/*" = ["S101"]
"tests/conftest.py" = ["ARG001", "PT003", "PT022"]
"tests/roots/test-docstrings/conf.py" = ["ARG001", "PTH100"]
"tests/roots/test-docstrings/dummy_django_app/models.py" = ["DJ008", "N815"]
"tests/roots/test-docstrings/dummy_django_app/settings.py" = ["S105"]
"tests/test_roles.py" = ["ARG001"]

[tool.ruff.lint.pylint]
max-args = 6  # default is 5
max-branches = 14  # default is 12

